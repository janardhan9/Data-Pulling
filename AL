




#config.py


import os

# Read OPENSTATES_API_KEY from environment
OPENSTATES_API_KEY = os.getenv("OPENSTATES_API_KEY")
if not OPENSTATES_API_KEY:
    raise ValueError("Please set the OPENSTATES_API_KEY environment variable.")


#################################################################

# extract.py 

#################################################################


import sys
import requests
import pandas as pd
import time
from datetime import datetime
from config import OPENSTATES_API_KEY

KEYWORDS = [
    "prior authorization", "utilization review", "utilization management",
    "medical necessity review", "prompt pay", "prompt payment", "clean claims",
    "clean claim", "coordination of benefits", "artificial intelligence",
    "clinical decision support", "automated decision making",
    "automate decision support"
]

def matches_keywords(bill_text, keywords):
    """Check if bill text contains any of the specified keywords"""
    if not bill_text:
        return False
    text_to_search = bill_text.lower()
    return any(keyword.lower() in text_to_search for keyword in keywords)

def get_enhanced_summary(bill):
    """Extract summary from multiple possible sources"""
    
    # Primary summary fields to check
    summary_fields = [
        "summary", "abstract", "description", "digest", 
        "synopsis", "brief", "overview", "purpose"
    ]
    
    # Try each field
    for field in summary_fields:
        summary = bill.get(field, "")
        if summary and len(summary.strip()) > 10:
            return summary.strip()
    
    # Try nested fields
    extras = bill.get("extras", {})
    if isinstance(extras, dict):
        for field in summary_fields:
            summary = extras.get(field, "")
            if summary and len(summary.strip()) > 10:
                return summary.strip()
    
    # Extract from actions - look for meaningful descriptions
    actions = bill.get("actions", [])
    if actions:
        for action in actions:
            action_desc = action.get("description", "")
            if len(action_desc) > 50 and any(keyword in action_desc.lower() 
                                           for keyword in ["amend", "create", "establish", "require", "provide"]):
                return action_desc.strip()
    
    # Look for the first "introduced" action
    if actions:
        for action in actions:
            action_desc = action.get("description", "")
            if "introduced" in action_desc.lower() and len(action_desc) > 30:
                return action_desc.strip()
    
    # Clean title fallback
    title = bill.get("title", "")
    if title and len(title) > 20:
        clean_title = title.replace("An act to", "").replace("A bill to", "").replace("An Act", "").strip()
        if clean_title:
            return clean_title
        return title
    
    return "No summary available"

def get_bill_abstract(bill):
    """Extract bill abstract if available"""
    abstracts = bill.get("abstracts", [])
    if abstracts:
        for abstract in abstracts:
            abstract_text = abstract.get("abstract", "")
            if abstract_text and len(abstract_text.strip()) > 10:
                return abstract_text.strip()
    return ""

def get_document_link(bill):
    """Get first document link URL, fallback to openstates URL"""
    documents = bill.get("documents", [])
    if documents:
        for doc in documents:
            links = doc.get("links", [])
            if links:
                doc_url = links[0].get("url", "")
                if doc_url:
                    return doc_url
    
    return bill.get("openstates_url", "")

def get_current_status(bill):
    """Get current status using latest_action_description"""
    latest_action_desc = bill.get("latest_action_description", "")
    if latest_action_desc:
        return latest_action_desc
    
    actions = bill.get("actions", [])
    if actions:
        sorted_actions = sorted(actions, key=lambda x: x.get("date", ""), reverse=True)
        if sorted_actions:
            return sorted_actions[0].get("description", "Unknown")
    
    return "Unknown"

def get_last_action(bill):
    """Get last action description only (no date)"""
    actions = bill.get("actions", [])
    if actions:
        last = max(actions, key=lambda a: a.get("date", ""), default={})
        return last.get("description", "No actions recorded")
    return "No actions recorded"

def fetch_and_filter(state_abbr):
    """Fetch bills using direct search with proper filtering"""
    records = []
    request_count = 0
    
    print(f"Starting extraction for {state_abbr}...")
    
    for kw in KEYWORDS:
        if request_count > 0:
            print(f"Waiting 10 seconds... (request #{request_count + 1})")
            time.sleep(10)  # Increased from 6 to 10 seconds
        
        try:
            url = "https://v3.openstates.org/bills"
            headers = {"X-API-KEY": OPENSTATES_API_KEY}
            params = {
                "jurisdiction": state_abbr.lower(),
                "q": kw,
                "updated_since": "2025-01-01",
               
                "include": ["actions", "sponsorships", "sources", "documents", "versions", "votes", "related_bills", "abstracts"]
                #"include": "actions,sponsorships,sources,documents,versions,votes,related_bills,abstracts"  # FIXED: Comma-separated string
            }
            
            response = requests.get(url, headers=headers, params=params)
            response.raise_for_status()
            bills_data = response.json()
            
            request_count += 1
            found_bills = bills_data.get("results", [])
            print(f"✓ API returned {len(found_bills)} bills for keyword '{kw}'")
            
            for bill in found_bills:
                # Extract text for keyword verification
                title = bill.get("title", "")
                
                # Enhanced summary extraction
                base_summary = get_enhanced_summary(bill)
                
                # Get bill abstract
                abstract_text = get_bill_abstract(bill)
                
                # Combine summary with abstract
                if abstract_text:
                    summary_final = f"{base_summary} | BillAbstract: {abstract_text}"
                else:
                    summary_final = base_summary
                
                combined_text = f"{title} {summary_final}"
                
                # Verify the bill actually contains our keywords
                if matches_keywords(combined_text, KEYWORDS):
                    # Extract session info safely
                    session_info = bill.get("session", {})
                    if isinstance(session_info, dict):
                        session_name = session_info.get("identifier", "")
                        session_display = session_info.get("name", "")
                    elif isinstance(session_info, str):
                        session_name = session_info
                        session_display = session_info
                    else:
                        session_name = "Unknown"
                        session_display = "2025"
                    
                    # Extract year from session name
                    year = "2025"
                    if "2025" in session_name or "2025" in session_display:
                        year = "2025"
                    elif "2026" in session_name or "2026" in session_display:
                        year = "2026"
                    
                    # Get all required fields
                    current_status = get_current_status(bill)
                    last_action = get_last_action(bill)
                    
                    sponsorships = bill.get("sponsorships", [])
                    sponsors = ", ".join(s.get("name", "") for s in sponsorships if s.get("name")) or "No sponsors listed"

                    jurisdiction = bill.get("jurisdiction", {})
                    if isinstance(jurisdiction, dict):
                        state_name = jurisdiction.get("name", state_abbr)
                    else:
                        state_name = state_abbr

                    bill_link = get_document_link(bill)

                    records.append({
                        "Year": year,
                        "State": state_name,
                        "Bill Number": bill.get("identifier", ""),
                        "Bill Title/Topic": title,
                        "Summary": summary_final,
                        "Sponsors": sponsors,
                        "Last Action": last_action,
                        "Bill Link": bill_link,
                        "Current Status": current_status,
                        "Extracted Date": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                    })
                    
        except Exception as e:
            print(f"Error fetching '{kw}' for {state_abbr}: {e}")
            continue
    
    # Remove duplicates based on Bill Number
    df = pd.DataFrame(records)
    if not df.empty:
        initial_count = len(df)
        df.drop_duplicates(subset=["Bill Number"], inplace=True)
        final_count = len(df)
        print(f"Removed {initial_count - final_count} duplicates")
    
    return df

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python extract_bills.py <STATE_ABBR>")
        sys.exit(1)
    
    state = sys.argv[1].upper()
    df = fetch_and_filter(state)
    
    if not df.empty:
        out_file = f"bills_{state}.xlsx"
        df.to_excel(out_file, index=False)
        print(f"✓ Extraction complete for {state}: {out_file} ({len(df)} bills found)")
    else:
        print(f"✗ No matching bills found for {state}")






#################################################################



#combine_and_deduplicate.py








import glob
import pandas as pd
from datetime import datetime

def merge_sheets():
    """Merge all state bill files into one workbook"""
    files = glob.glob("bills_*.xlsx")
    if not files:
        print("No bill files found to merge.")
        return
    
    print(f"Found {len(files)} files to merge: {files}")
    
    df_list = []
    for file in files:
        try:
            df = pd.read_excel(file)
            if not df.empty:
                df_list.append(df)
                print(f"Loaded {len(df)} bills from {file}")
            else:
                print(f"Skipped empty file: {file}")
        except Exception as e:
            print(f"Error loading {file}: {e}")
    
    if not df_list:
        print("No valid data found in any files.")
        return
    
    combined = pd.concat(df_list, ignore_index=True)
    
    # Remove duplicates based on Bill Link
    initial_count = len(combined)
    combined.drop_duplicates(subset=["Bill Link"], inplace=True)
    final_count = len(combined)
    
    # Sort by State, then by Bill Number
    combined = combined.sort_values(["State", "Bill Number"])
    
    # Save with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"all_bills_2025_2026_{timestamp}.xlsx"
    combined.to_excel(output_file, index=False)
    
    print(f"\n✓ Combined workbook saved: {output_file}")
    print(f"✓ Total bills: {final_count} (removed {initial_count - final_count} duplicates)")
    print(f"✓ States covered: {len(combined['State'].unique())}")
    
    # Show summary by state
    print("\nBills by state:")
    state_counts = combined['State'].value_counts()
    for state, count in state_counts.items():
        print(f"  {state}: {count} bills")

if __name__ == "__main__":
    merge_sheets()
#################################################################



#scheduler.py




import schedule
import time
import subprocess
import sys
from datetime import datetime

# All 50 US states + DC + US Territories
ALL_STATES = [
    # 50 States + DC
    "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA",
    "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
    "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ",
    "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC",
    "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "DC",
    
    # US Territories
    "PR",  # Puerto Rico
    "VI",  # US Virgin Islands
    "GU",  # Guam
    "AS",  # American Samoa
    "MP"   # Northern Mariana Islands
]

def extract_single_state(state):
    """Extract bills for a single state or territory"""
    try:
        print(f"\n=== Starting extraction for {state} ===")
        result = subprocess.run(
            [sys.executable, "extract_bills.py", state], 
            capture_output=True, text=True, timeout=1800  # 30 minute timeout
        )
        
        if result.returncode == 0:
            print(f"✓ {state} completed successfully")
            print(result.stdout)  # Show the extraction summary
            return True
        else:
            print(f"✗ {state} failed: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"✗ {state} timed out after 30 minutes")
        return False
    except Exception as e:
        print(f"✗ {state} error: {e}")
        return False

def job():
    """Main job function - extract all states/territories and combine"""
    print(f"\n{'='*60}")
    print(f"Starting bi-weekly bill extraction job")
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Total jurisdictions to process: {len(ALL_STATES)}")
    print(f"{'='*60}")
    
    successful_jurisdictions = []
    failed_jurisdictions = []
    
    # Extract each state/territory
    for i, jurisdiction in enumerate(ALL_STATES, 1):
        print(f"\n[{i}/{len(ALL_STATES)}] Processing {jurisdiction}...")
        
        if extract_single_state(jurisdiction):
            successful_jurisdictions.append(jurisdiction)
        else:
            failed_jurisdictions.append(jurisdiction)
        
        # Brief pause between jurisdictions
        time.sleep(2)
    
    # Combine results
    print(f"\n{'='*60}")
    print(f"Combining results from all jurisdictions...")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(
            [sys.executable, "combine_and_deduplicate.py"], 
            capture_output=True, text=True, timeout=300
        )
        
        if result.returncode == 0:
            print("✓ Successfully combined all jurisdiction files")
            print(result.stdout)
        else:
            print(f"✗ Failed to combine files: {result.stderr}")
            
    except Exception as e:
        print(f"✗ Error combining files: {e}")
    
    # Final summary
    print(f"\n{'='*60}")
    print(f"JOB COMPLETED")
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*60}")
    print(f"✓ Successful jurisdictions ({len(successful_jurisdictions)}): {', '.join(successful_jurisdictions)}")
    if failed_jurisdictions:
        print(f"✗ Failed jurisdictions ({len(failed_jurisdictions)}): {', '.join(failed_jurisdictions)}")
    print(f"Success rate: {len(successful_jurisdictions)}/{len(ALL_STATES)} ({len(successful_jurisdictions)/len(ALL_STATES)*100:.1f}%)")
    print(f"{'='*60}")

# Schedule every 14 days at 2:00 AM
schedule.every(14).days.at("02:00").do(job)

if __name__ == "__main__":
    print("Bill Extraction Scheduler Started")
    print(f"Monitoring {len(ALL_STATES)} jurisdictions (50 states + DC + 5 territories)")
    print("Scheduled to run every 14 days at 2:00 AM")
    print("Press Ctrl+C to stop\n")
    
    # Optional: run once immediately for testing
    if len(sys.argv) > 1 and sys.argv[1] == "--run-now":
        print("Running job immediately...")
        job()
    elif len(sys.argv) > 1 and sys.argv[1] == "--test":
        print("Running test with first 3 states...")
        # Test with just first 3 states
        original_states = ALL_STATES.copy()
        ALL_STATES.clear()
        ALL_STATES.extend(original_states[:3])
        job()
    else:
        print("Options:")
        print("  --run-now  : Run extraction immediately")
        print("  --test     : Test with first 3 states only")
        print("  (no args) : Start scheduler")
        print()
    
    while True:
        schedule.run_pending()
        time.sleep(60)


#################################################################

##test_all_states_summary.py



import requests
import time
from config import OPENSTATES_API_KEY

# Test with representative states from different regions/data quality levels
TEST_STATES = [
    # High-detail states
    "CA", "TX", "NY", "FL", "IL", "WA",
    # Medium-detail states  
    "PA", "OH", "MI", "GA", "NC", "VA",
    # Low-detail states
    "WY", "VT", "DE", "MT", "ND", "SD",
    # Territories
    "PR", "GU",
    # Your original test states
    "AK", "AL"
]

def get_enhanced_summary(bill):
    """Same enhanced summary function from extract_bills.py"""
    summary_fields = [
        "summary", "abstract", "description", "digest", 
        "synopsis", "brief", "overview", "purpose"
    ]
    
    for field in summary_fields:
        summary = bill.get(field, "")
        if summary and len(summary.strip()) > 10:
            return summary.strip()
    
    extras = bill.get("extras", {})
    if isinstance(extras, dict):
        for field in summary_fields:
            summary = extras.get(field, "")
            if summary and len(summary.strip()) > 10:
                return summary.strip()
    
    actions = bill.get("actions", [])
    if actions:
        for action in actions:
            action_desc = action.get("description", "")
            if len(action_desc) > 50 and any(keyword in action_desc.lower() 
                                           for keyword in ["amend", "create", "establish", "require", "provide"]):
                return action_desc.strip()
    
    if actions:
        for action in actions:
            action_desc = action.get("description", "")
            if "introduced" in action_desc.lower() and len(action_desc) > 30:
                return action_desc.strip()
    
    title = bill.get("title", "")
    if title and len(title) > 20:
        clean_title = title.replace("An act to", "").replace("A bill to", "").replace("An Act", "").strip()
        if clean_title:
            return clean_title
        return title
    
    return "No summary available"

def test_state_summary_quality(state_abbr):
    """Test summary extraction quality for a specific state"""
    print(f"\n=== TESTING {state_abbr} ===")
    
    url = "https://v3.openstates.org/bills"
    headers = {"X-API-KEY": OPENSTATES_API_KEY}
    params = {
        "jurisdiction": state_abbr.lower(),
        "updated_since": "2025-01-01",
        "per_page": 10,
        "include": ["actions", "sponsorships", "sources"]
    }
    
    try:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            bills = response.json().get("results", [])
            
            if not bills:
                print(f"  ❌ No bills found")
                return {"state": state_abbr, "status": "no_bills", "summary_quality": 0}
            
            # Analyze summary quality
            summary_stats = {
                "total_bills": len(bills),
                "has_official_summary": 0,
                "has_extracted_summary": 0,
                "title_fallback": 0,
                "no_summary": 0
            }
            
            for bill in bills:
                # Check for official summary fields
                has_official = any(bill.get(field) for field in ["summary", "abstract", "description", "digest"])
                
                # Test enhanced extraction
                summary = get_enhanced_summary(bill)
                
                if has_official:
                    summary_stats["has_official_summary"] += 1
                
                if summary and summary != "No summary available":
                    summary_stats["has_extracted_summary"] += 1
                    
                    # Check if it's just a title fallback
                    title = bill.get("title", "")
                    if title and (title in summary or summary in title):
                        summary_stats["title_fallback"] += 1
                else:
                    summary_stats["no_summary"] += 1
            
            # Calculate quality score
            quality_score = (summary_stats["has_official_summary"] / summary_stats["total_bills"]) * 100
            
            print(f"  ✓ Found {summary_stats['total_bills']} bills")
            print(f"  ✓ Official summaries: {summary_stats['has_official_summary']}/{summary_stats['total_bills']} ({quality_score:.1f}%)")
            print(f"  ✓ Extracted summaries: {summary_stats['has_extracted_summary']}/{summary_stats['total_bills']}")
            print(f"  ✓ Title fallbacks: {summary_stats['title_fallback']}/{summary_stats['total_bills']}")
            
            return {
                "state": state_abbr, 
                "status": "success", 
                "summary_quality": quality_score,
                "stats": summary_stats
            }
            
        else:
            print(f"  ❌ API Error: {response.status_code}")
            return {"state": state_abbr, "status": "api_error", "summary_quality": 0}
            
    except Exception as e:
        print(f"  ❌ Error: {e}")
        return {"state": state_abbr, "status": "error", "summary_quality": 0}

def run_comprehensive_test():
    """Test all states and generate summary report"""
    print("COMPREHENSIVE SUMMARY EXTRACTION TEST")
    print("=" * 60)
    
    results = []
    
    for i, state in enumerate(TEST_STATES):
        print(f"\n[{i+1}/{len(TEST_STATES)}] Testing {state}...")
        result = test_state_summary_quality(state)
        results.append(result)
        
        # Rate limiting
        time.sleep(6)
    
    # Generate summary report
    print("\n" + "=" * 60)
    print("SUMMARY REPORT")
    print("=" * 60)
    
    successful_states = [r for r in results if r["status"] == "success"]
    high_quality = [r for r in successful_states if r["summary_quality"] >= 50]
    medium_quality = [r for r in successful_states if 20 <= r["summary_quality"] < 50]
    low_quality = [r for r in successful_states if r["summary_quality"] < 20]
    
    print(f"Total states tested: {len(TEST_STATES)}")
    print(f"Successful extractions: {len(successful_states)}")
    print(f"High quality summaries (≥50%): {len(high_quality)}")
    print(f"Medium quality summaries (20-49%): {len(medium_quality)}")
    print(f"Low quality summaries (<20%): {len(low_quality)}")
    
    print("\nHigh Quality States:")
    for r in high_quality:
        print(f"  {r['state']}: {r['summary_quality']:.1f}%")
    
    print("\nMedium Quality States:")
    for r in medium_quality:
        print(f"  {r['state']}: {r['summary_quality']:.1f}%")
    
    print("\nLow Quality States:")
    for r in low_quality:
        print(f"  {r['state']}: {r['summary_quality']:.1f}%")
    
    print(f"\nOverall Success Rate: {len(successful_states)/len(TEST_STATES)*100:.1f}%")

if __name__ == "__main__":
    run_comprehensive_test()

#################################################################

#test_states.py


import sys
import requests
from config import OPENSTATES_API_KEY

TEST_STATES = ["AK", "CA", "TX", "NY", "FL"]

def test_working_approach():
    """Test the working bills search approach"""
    print("=== TESTING BILLS SEARCH API ===\n")
    
    for state in TEST_STATES:
        print(f"=== {state} - BILLS SEARCH ===")
        
        url = "https://v3.openstates.org/bills"
        headers = {"X-API-KEY": OPENSTATES_API_KEY}
        params = {
            "jurisdiction": state.lower(),
            "updated_since": "2025-01-01",
            "per_page": 10,
            "include": "actions,sponsorships,sources"
        }
        
        try:
            response = requests.get(url, headers=headers, params=params)
            if response.status_code == 200:
                data = response.json()
                bills = data.get("results", [])
                
                if bills:
                    print(f"✓ Found {len(bills)} bills")
                    
                    # Extract unique sessions safely
                    sessions = set()
                    for bill in bills:
                        session_info = bill.get("session")
                        if session_info:
                            if isinstance(session_info, dict):
                                session_id = session_info.get("identifier", "")
                                if session_id:
                                    sessions.add(session_id)
                            elif isinstance(session_info, str):
                                sessions.add(session_info)
                    
                    print(f"✓ Sessions found: {list(sessions)}")
                    
                    # Show sample bills
                    print("Sample bills:")
                    for i, bill in enumerate(bills[:3]):
                        print(f"  {i+1}. {bill.get('identifier', 'N/A')} - {bill.get('title', 'N/A')[:50]}...")
                else:
                    print("✗ No bills found")
            else:
                print(f"✗ Error: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"✗ Error: {e}")
        
        print("-" * 50)

if __name__ == "__main__":
    test_working_approach()


#################################################################



#test_summary_fix.py

# test_summary_fix.py
import requests
from config import OPENSTATES_API_KEY

def get_enhanced_summary(bill):
    """Extract summary from multiple possible sources"""
    
    # Primary summary fields to check
    summary_fields = [
        "summary", "abstract", "description", "digest", 
        "synopsis", "brief", "overview", "purpose"
    ]
    
    # Try each field
    for field in summary_fields:
        summary = bill.get(field, "")
        if summary and len(summary.strip()) > 10:  # Ensure meaningful content
            return summary.strip()
    
    # Try nested fields
    extras = bill.get("extras", {})
    if isinstance(extras, dict):
        for field in summary_fields:
            summary = extras.get(field, "")
            if summary and len(summary.strip()) > 10:
                return summary.strip()
    
    # Extract from actions (legislative summaries)
    actions = bill.get("actions", [])
    if actions:
        for action in actions:
            action_desc = action.get("description", "")
            # Look for actions that contain substantive descriptions
            if len(action_desc) > 100 and any(keyword in action_desc.lower() 
                                            for keyword in ["summary", "digest", "analysis"]):
                return action_desc.strip()
    
    # Extract from documents if available
    documents = bill.get("documents", [])
    if documents:
        for doc in documents:
            doc_name = doc.get("name", "").lower()
            if any(keyword in doc_name for keyword in ["summary", "digest", "analysis"]):
                return f"See document: {doc.get('name', 'Legislative Document')}"
    
    # Last resort: use bill title as summary if nothing else available
    title = bill.get("title", "")
    if title and len(title) > 20:
        return f"Bill Title: {title}"
    
    return "No summary available"

def test_summary_extraction(state_abbr):
    """Test summary extraction for debugging"""
    print(f"\n=== TESTING SUMMARY EXTRACTION FOR {state_abbr} ===")
    
    url = "https://v3.openstates.org/bills"
    headers = {"X-API-KEY": OPENSTATES_API_KEY}
    params = {
        "jurisdiction": state_abbr.lower(),
        "updated_since": "2025-01-01",
        "per_page": 5,
        "include": ["actions", "sponsorships", "sources"]
    }
    
    try:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            bills = response.json().get("results", [])
            
            for bill in bills:
                print(f"\nBill: {bill.get('identifier', 'N/A')}")
                print(f"Title: {bill.get('title', 'N/A')}")
                
                # Test original fields
                print(f"Summary field: {bill.get('summary', 'EMPTY')}")
                print(f"Abstract field: {bill.get('abstract', 'EMPTY')}")
                print(f"Description field: {bill.get('description', 'EMPTY')}")
                
                # Test enhanced extraction
                summary = get_enhanced_summary(bill)
                print(f"Enhanced summary: {summary[:100]}...")
                print("-" * 50)
        else:
            print(f"Error: {response.status_code}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    # Test with your problematic states
    test_summary_extraction("AK")
    test_summary_extraction("AL")
    test_summary_extraction("CA")  # For comparison



#################################################################

#################################################################
