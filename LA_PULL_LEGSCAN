import os
import json
import pandas as pd

# ─── Configuration ──────────────────────────────────────────────────────────
BASE_DIR     = "datasets"          # Root of your downloaded/extracted data
STATE        = "LA"                # State subfolder label
TARGET_YEARS = []                   # e.g., ["2025", "2026"] to process specific years; empty = all years
# ─────────────────────────────────────────────────────────────────────────────

def find_bill_directories():
    """
    Walks through BASE_DIR/{session}/{STATE}/{session_folder}/bill directories.
    Returns a list of paths to each 'bill' directory.
    """
    bill_dirs = []
    if not os.path.isdir(BASE_DIR):
        print(f"Base directory not found: {BASE_DIR}")
        return bill_dirs

    for session in os.listdir(BASE_DIR):
        if TARGET_YEARS and session not in TARGET_YEARS:
            continue
        state_dir = os.path.join(BASE_DIR, session, STATE)
        if not os.path.isdir(state_dir):
            continue
        for sub in os.listdir(state_dir):
            bill_path = os.path.join(state_dir, sub, 'bill')
            if os.path.isdir(bill_path):
                print(f"Found bill directory: {bill_path}")
                bill_dirs.append(bill_path)
    return bill_dirs


def main():
    print("=== Starting JSON-to-CSV combine for all bills ===")
    bill_dirs = find_bill_directories()
    if not bill_dirs:
        print("No bill directories found. Check BASE_DIR, STATE, or TARGET_YEARS.")
        return

    records = []
    for bill_dir in bill_dirs:
        for fname in os.listdir(bill_dir):
            if fname.lower().endswith('.json'):
                file_path = os.path.join(bill_dir, fname)
                try:
                    with open(file_path, 'r') as f:
                        data = json.load(f)
                    records.append(data)
                except Exception as e:
                    print(f"Error reading {file_path}: {e}")

    if not records:
        print("No JSON bill files found in any bill directories.")
        return

    # Flatten nested JSON into a flat DataFrame
    df = pd.json_normalize(records)

    # Write to a single combined CSV
    output_csv = os.path.join(BASE_DIR, f"{STATE}_bills.csv")
    try:
        df.to_csv(output_csv, index=False)
        print(f"Combined CSV created at: {output_csv}")
    except Exception as e:
        print(f"Failed to write combined CSV: {e}")

if __name__ == '__main__':
    main()
